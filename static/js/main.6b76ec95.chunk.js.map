{"version":3,"sources":["utils.js","App.js","reportWebVitals.js","index.js"],"names":["masterWords","require","uniqBy","wordsSet","Set","masterStubs","words","results","forEach","word","i","length","add","slice","createStubs","isWord","str","has","getUnused","initialLetters","result","l","replace","getStubs","base","rest","ltr","removed","moreStubs","setA","setB","sortedLetters","sort","join","getDuplicatedGroups","letters","push","removeMiddle","map","scoreWord","patents","doubled","baseScore","k","kTest","j","jTest","b","bTest","includes","getAllWords","passedOptions","defaults","minLength","hintsOnly","options","Object","assign","finalS","duplicateLetter","excludeAnagrams","capLetters","toUpperCase","letterGroups","letterGroup","stubs","stub","filter","w","App","useState","search","setSearch","setWords","letterHistory","setLetterHistory","selected","setSelected","setFinalS","setDuplicate","onlyShowHints","setOnlyHints","setPatents","getPossibleWords","a","newWords","Dropdown","onSelect","value","onChange","e","o","handleSelect","target","refresh","handleSubmit","preventDefault","orderedWords","orderBy","className","onSubmit","aria-label","autoFocus","name","type","checked","hidden","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b76ec95.chunk.js","sourcesContent":["const masterWords = require('./data/words.json')\nconst { uniqBy } = require('lodash')\n\nconst mergeSets = (setA, setB) => {\n  return new Set([...setA, ...setB])\n}\n\nconst wordsSet = new Set(masterWords)\n\nconst createStubs = (words) => {\n  let results = new Set()\n  words.forEach((word) => {\n    for (let i = 1; i < word.length; i++) {\n      results.add(word.slice(0, i))\n    }\n  })\n  return results\n}\n\nconst masterStubs = createStubs(masterWords)\n\nconst isWord = (str) => {\n  return wordsSet.has(str)\n}\n\nconst isStub = (str) => {\n  const result = masterStubs.has(str)\n  return result\n}\n\nconst getUnused = (str, initialLetters) => {\n  let result = initialLetters\n  ;[...str].forEach((l) => {\n    result = result.replace(l, '')\n  })\n  return result\n}\n\nconst getStubs = (base, rest) => {\n  let results = new Set()\n  ;[...rest].forEach((ltr) => {\n    if (isStub(base + ltr)) {\n      let removed = rest.replace(ltr, '')\n      results.add(base + ltr)\n      const moreStubs = getStubs(base + ltr, removed)\n      results = mergeSets(results, moreStubs)\n    }\n  })\n  return results\n}\n\nexport const sortedLetters = (word) => {\n  return [...word].sort().join('')\n}\n\nconst getDuplicatedGroups = (letters) => {\n  let results = [letters]\n  ;[...letters].forEach((l) => {\n    results.push(letters + l)\n  })\n  return uniqBy(results, sortedLetters)\n}\n\nconst removeMiddle = (word) => {\n  let result = word[0] + [...word.slice(1, -1)].map((l) => '*').join('') + word.slice(-1)\n  return result\n}\n\nconst getAllWords = (letters, passedOptions = {}) => {\n  let defaults = {\n    minLength: 3,\n    hintsOnly: false,\n  }\n  let options = Object.assign({}, defaults, passedOptions)\n  const { finalS, duplicateLetter, excludeAnagrams, minLength } = options\n  const capLetters = letters.toUpperCase()\n  let results = new Set()\n  let letterGroups = [capLetters]\n  if (duplicateLetter) {\n    letterGroups = getDuplicatedGroups(capLetters)\n  }\n  letterGroups.forEach((letterGroup) => {\n    const stubs = getStubs('', letterGroup)\n    ;[...stubs].forEach((stub) => {\n      const rest = getUnused(stub, letterGroup)\n      ;[...rest].forEach((ltr) => {\n        if (isWord(stub + ltr)) {\n          results.add(stub + ltr)\n        }\n        if (finalS && isWord(stub + 'S')) {\n          results.add(stub + 'S')\n        }\n      })\n    })\n  })\n  results = [...results].filter((w) => w.length >= minLength)\n  if (options.hintsOnly) {\n    results = results.map((result) => {\n      return removeMiddle(result)\n    })\n  }\n  if (excludeAnagrams || options.hintsOnly) {\n    results = uniqBy(results, sortedLetters)\n  }\n  return results\n}\n\nconst useSameLetters = (word, drow) => {\n  return [...word].sort().join('') === [...drow].sort().join('')\n}\n\nexport const scoreWord = (word, patents = {}) => {\n  let doubled = false\n  let baseScore = word.length - 2\n  if (word.length === 6) {\n    baseScore = baseScore + 1\n  }\n  if (word.length === 7) {\n    baseScore = baseScore + 2\n  }\n  if (patents.k) {\n    const kTest = word.replace(/[AEIOU]/g, '').length + 1 === word.length\n    if (!doubled && kTest) {\n      baseScore = baseScore * 2\n      doubled = true\n    }\n  }\n  if (patents.j) {\n    const jTest = word.replace(/[AEIOUY]/g, '').length <= word.length / 2\n    if (!doubled && jTest) {\n      baseScore = baseScore * 2\n      doubled = true\n    }\n  }\n  if (patents.b) {\n    const bTest = 'AEIOUY'.includes(word[0]) && 'AEIOUY'.includes(word.slice(-1))\n    if (!doubled && bTest) {\n      baseScore = baseScore * 2\n      doubled = true\n    }\n  }\n  if (!doubled && word.includes('Q')) {\n    baseScore = baseScore * 2\n    doubled = true\n  }\n  return baseScore\n}\n\nexport default getAllWords\n","import { useState } from 'react'\nimport './App.css'\nimport axios from 'axios'\nimport getAllWords, { sortedLetters, scoreWord } from './utils'\nimport { orderBy, uniqBy } from 'lodash'\n\nfunction App() {\n  const [search, setSearch] = useState('')\n  const [words, setWords] = useState({})\n  const [letterHistory, setLetterHistory] = useState([])\n  const [selected, setSelected] = useState('')\n  const [finalS, setFinalS] = useState(false)\n  const [duplicateLetter, setDuplicate] = useState(false)\n  const [onlyShowHints, setOnlyHints] = useState(false)\n  const [patents, setPatents] = useState({\n    b: false,\n    k: false,\n    j: false,\n  })\n\n  const getWordOptions = () => {\n    return {\n      hintsOnly: onlyShowHints,\n      finalS,\n      duplicateLetter,\n      patents,\n    }\n  }\n\n  const fetchAllWords = async (str, options) => {\n    const backendBase = process.env.REACT_APP_BACKEND_BASE || ''\n    const response = await axios.post(`${backendBase}/api/ag/${str}`, options)\n    return response.data\n  }\n\n  const getWordsLocally = async (str, options) => {\n    let newWords = getAllWords(str, options)\n    return newWords\n    newWords = orderBy(newWords, (word) => word.length, 'desc')\n  }\n\n  const getPossibleWords =\n    process.env.REACT_APP_HAS_BACKEND == '1' ? fetchAllWords : getWordsLocally\n\n  const Dropdown = ({ options, onSelect }) => {\n    return (\n      <select\n        value={selected}\n        onChange={(e) => {\n          onSelect(e)\n        }}\n      >\n        {options.map((o) => (\n          <option key={o} value={o}>\n            {o}\n          </option>\n        ))}\n      </select>\n    )\n  }\n\n  const handleSelect = async (e) => {\n    setSelected(e.target.value)\n    refresh(e.target.value)\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    setLetterHistory(uniqBy([...letterHistory, search], sortedLetters))\n    refresh(search)\n  }\n\n  const refresh = async (search) => {\n    const newWords = await getPossibleWords(search, getWordOptions())\n    setWords(newWords)\n  }\n\n  const orderedWords = orderBy(words, (word) => scoreWord(word, patents), 'desc')\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <form onSubmit={handleSubmit}>\n          <div>\n            <input\n              className=\"letter-input\"\n              aria-label=\"letter-input\"\n              value={search}\n              autoFocus\n              onChange={(e) => setSearch(e.target.value)}\n            />\n          </div>\n          <div>\n            <label>\n              B\n              <input\n                name=\"onlyHints\"\n                type=\"checkbox\"\n                checked={patents.b}\n                onChange={() =>\n                  setPatents({\n                    ...patents,\n                    b: !patents.b,\n                  })\n                }\n              />\n            </label>\n\n            <label>\n              K\n              <input\n                name=\"finalS\"\n                type=\"checkbox\"\n                checked={patents.k}\n                onChange={() =>\n                  setPatents({\n                    ...patents,\n                    k: !patents.k,\n                  })\n                }\n              />\n            </label>\n            <label>\n              J\n              <input\n                name=\"duplicate\"\n                type=\"checkbox\"\n                checked={patents.j}\n                onChange={() =>\n                  setPatents({\n                    ...patents,\n                    j: !patents.j,\n                  })\n                }\n              />\n            </label>\n          </div>\n          <div>\n            <label>\n              Show hints only:\n              <input\n                name=\"onlyHints\"\n                type=\"checkbox\"\n                checked={onlyShowHints}\n                onChange={() => setOnlyHints(!onlyShowHints)}\n              />\n            </label>\n\n            <label>\n              Add final S:\n              <input\n                name=\"finalS\"\n                type=\"checkbox\"\n                checked={finalS}\n                onChange={() => setFinalS(!finalS)}\n              />\n            </label>\n            <label>\n              Duplicate letter:\n              <input\n                name=\"duplicate\"\n                type=\"checkbox\"\n                checked={duplicateLetter}\n                onChange={() => setDuplicate(!duplicateLetter)}\n              />\n            </label>\n          </div>\n          <input type=\"submit\" hidden />\n        </form>\n        <div className=\"history-dropdown\">\n          <p>History:</p>\n          <Dropdown options={letterHistory} onSelect={handleSelect} />\n        </div>\n        <div className=\"main\">\n          <div className=\"history-list-holder\">\n            <p>History:</p>\n            <ul>\n              {letterHistory.map((word, i) => {\n                return (\n                  <li\n                    key={`history-${i}`}\n                    onClick={() => {\n                      setSearch(word)\n                      refresh(word)\n                    }}\n                    className=\"history-item\"\n                  >\n                    {word}\n                  </li>\n                )\n              })}\n            </ul>\n          </div>\n          <div>\n            {words.length === 0 && <p>No possible words!</p>}\n            <ul className=\"wordlist\">\n              {orderedWords.map((word, i) => {\n                return (\n                  <li className=\"wordlist-item\" key={`word-${i}`}>\n                    {word} ({scoreWord(word, patents)})\n                  </li>\n                )\n              })}\n            </ul>\n          </div>\n        </div>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}