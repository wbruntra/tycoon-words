{"version":3,"sources":["utils.js","App.js","reportWebVitals.js","index.js"],"names":["words","require","wordsSet","Set","masterStubs","results","forEach","word","i","length","add","slice","createStubs","isWord","str","has","getUnused","initialLetters","result","l","replace","getStubs","base","rest","ltr","removed","moreStubs","setA","setB","getAllWords","letters","minLength","capLetters","toUpperCase","stubs","stub","filter","w","App","useState","search","setSearch","setWords","letterHistory","setLetterHistory","selected","setSelected","Dropdown","options","onSelect","value","onChange","e","console","log","map","o","getWordsLocally","newWords","orderBy","className","onSubmit","preventDefault","autoFocus","target","type","hidden","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be66ee80.chunk.js","sourcesContent":["const words = require('./data/words.json')\n\nconst mergeSets = (setA, setB) => {\n  return new Set([...setA, ...setB])\n}\n\nconst wordsSet = new Set(words)\n\nconst createStubs = (words) => {\n  let results = new Set()\n  words.forEach((word) => {\n    for (let i = 1; i < word.length; i++) {\n      results.add(word.slice(0, i))\n    }\n  })\n  return results\n}\n\nconst masterStubs = createStubs(words)\n\nconst isWord = (str) => {\n  return wordsSet.has(str)\n}\n\nconst isStub = (str) => {\n  const result = masterStubs.has(str)\n  return result\n}\n\nconst getUnused = (str, initialLetters) => {\n  let result = initialLetters\n  ;[...str].forEach((l) => {\n    result = result.replace(l, '')\n  })\n  return result\n}\n\nconst getStubs = (base, rest) => {\n  let results = new Set()\n  ;[...rest].forEach((ltr) => {\n    if (isStub(base + ltr)) {\n      let removed = rest.replace(ltr, '')\n      results.add(base + ltr)\n      const moreStubs = getStubs(base + ltr, removed)\n      results = mergeSets(results, moreStubs)\n    }\n  })\n  return results\n}\n\nconst getAllWords = (letters, minLength = 1) => {\n  const capLetters = letters.toUpperCase()\n  const results = new Set()\n  const stubs = getStubs('', capLetters)\n  ;[...stubs].forEach((stub) => {\n    const rest = getUnused(stub, capLetters)\n    ;[...rest].forEach((ltr) => {\n      if (isWord(stub + ltr)) {\n        results.add(stub + ltr)\n      }\n    })\n  })\n  return [...results].filter((w) => w.length >= minLength)\n}\n\nexport default getAllWords\n","import { useState } from 'react'\nimport './App.css'\n// import axios from 'axios'\nimport getAllWords from './utils'\nimport { orderBy } from 'lodash'\n\nfunction App() {\n  const [search, setSearch] = useState('')\n  const [words, setWords] = useState([])\n  const [letterHistory, setLetterHistory] = useState([])\n  const [selected, setSelected] = useState('')\n\n  const Dropdown = ({ options, onSelect }) => {\n    return (\n      <select\n        value={selected}\n        onChange={(e) => {\n          console.log(e)\n          onSelect(e)\n        }}\n      >\n        {options.map((o) => (\n          <option key={o} value={o}>\n            {o}\n          </option>\n        ))}\n      </select>\n    )\n  }\n\n  // const getWords = (str) => {\n  //   axios.get(`/api/ag/${str}`).then((res) => {\n  //     setWords(res.data)\n  //   })\n  // }\n\n  const getWordsLocally = (str) => {\n    let newWords = getAllWords(str, 3)\n    newWords = orderBy(newWords, (word) => word.length, 'desc')\n    setWords(newWords)\n  }\n\n  const handleSelect = (e) => {\n    setSelected(e.target.value)\n    getWordsLocally(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    setLetterHistory([...letterHistory, search])\n    getWordsLocally(search)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <form onSubmit={handleSubmit}>\n          <input className=\"letter-input\" value={search} autoFocus onChange={(e) => setSearch(e.target.value)} />\n          <input type=\"submit\" hidden />\n        </form>\n        <p>History:</p>\n        <Dropdown className=\"history-dropdown\" options={letterHistory} onSelect={handleSelect} />\n        <div className=\"main\">\n          {/* <div>\n            <p>History:</p>\n            <ul>\n              {letterHistory.map((word) => {\n                return (\n                  <li\n                    key={`history-${word}`}\n                    onClick={() => {\n                      getWords(word)\n                    }}\n                    className=\"history-item\"\n                  >\n                    {word}\n                  </li>\n                )\n              })}\n            </ul>\n          </div> */}\n          <div>\n            {words.length === 0 && <p>No possible words!</p>}\n            <ul className=\"wordlist\">\n              {words.map((word) => {\n                return <li className=\"wordlist-item\" key={`word-${word}`}>{word}</li>\n              })}\n            </ul>\n          </div>\n        </div>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}