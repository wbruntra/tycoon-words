{"version":3,"sources":["utils.js","App.js","reportWebVitals.js","index.js"],"names":["words","require","uniqBy","wordsSet","Set","masterStubs","results","forEach","word","i","length","add","slice","createStubs","isWord","str","has","getUnused","initialLetters","result","l","replace","getStubs","base","rest","ltr","removed","moreStubs","setA","setB","sortedLetters","sort","join","getDuplicatedGroups","letters","push","getAllWords","minLength","options","finalS","duplicateLetter","excludeAnagrams","capLetters","toUpperCase","letterGroups","letterGroup","stubs","stub","filter","w","getWordsLocally","a","newWords","orderBy","getPossibleWords","App","useState","search","setSearch","setWords","letterHistory","setLetterHistory","selected","setSelected","setFinalS","setDuplicate","Dropdown","onSelect","value","onChange","e","map","o","handleSelect","target","refresh","handleSubmit","preventDefault","className","onSubmit","autoFocus","name","type","checked","hidden","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55105dcb.chunk.js","sourcesContent":["const words = require('./data/words.json')\nconst { uniqBy } = require('lodash')\n\nconst mergeSets = (setA, setB) => {\n  return new Set([...setA, ...setB])\n}\n\nconst wordsSet = new Set(words)\n\nconst createStubs = (words) => {\n  let results = new Set()\n  words.forEach((word) => {\n    for (let i = 1; i < word.length; i++) {\n      results.add(word.slice(0, i))\n    }\n  })\n  return results\n}\n\nconst masterStubs = createStubs(words)\n\nconst isWord = (str) => {\n  return wordsSet.has(str)\n}\n\nconst isStub = (str) => {\n  const result = masterStubs.has(str)\n  return result\n}\n\nconst getUnused = (str, initialLetters) => {\n  let result = initialLetters\n  ;[...str].forEach((l) => {\n    result = result.replace(l, '')\n  })\n  return result\n}\n\nconst getStubs = (base, rest) => {\n  let results = new Set()\n  ;[...rest].forEach((ltr) => {\n    if (isStub(base + ltr)) {\n      let removed = rest.replace(ltr, '')\n      results.add(base + ltr)\n      const moreStubs = getStubs(base + ltr, removed)\n      results = mergeSets(results, moreStubs)\n    }\n  })\n  return results\n}\n\nexport const sortedLetters = (word) => {\n  return [...word].sort().join('')\n}\n\nconst getDuplicatedGroups = (letters) => {\n  let results = [letters]\n  ;[...letters].forEach((l) => {\n    results.push(letters + l)\n  })\n  return uniqBy(results, sortedLetters)\n}\n\nconst getAllWords = (letters, minLength = 1, options = {}) => {\n  const { finalS, duplicateLetter, excludeAnagrams } = options\n  // console.log('Duplication:', duplicateLetter)\n  // console.log('Add S', finalS)\n  const capLetters = letters.toUpperCase()\n  let results = new Set()\n  let letterGroups = [capLetters]\n  if (duplicateLetter) {\n    letterGroups = getDuplicatedGroups(capLetters)\n  }\n  letterGroups.forEach((letterGroup) => {\n    const stubs = getStubs('', letterGroup)\n    ;[...stubs].forEach((stub) => {\n      const rest = getUnused(stub, letterGroup)\n      ;[...rest].forEach((ltr) => {\n        if (isWord(stub + ltr)) {\n          results.add(stub + ltr)\n        }\n        if (finalS && isWord(stub + 'S')) {\n          results.add(stub + 'S')\n        }\n      })\n    })\n  })\n  results = [...results].filter((w) => w.length >= minLength)\n  if (excludeAnagrams) {\n    return uniqBy(results, sortedLetters)\n  }\n  return results\n}\n\nconst useSameLetters = (word, drow) => {\n  return [...word].sort().join('') === [...drow].sort().join('')\n}\n\nexport default getAllWords\n","import { useState } from 'react'\nimport './App.css'\nimport axios from 'axios'\nimport getAllWords, { sortedLetters } from './utils'\nimport { orderBy, uniqBy } from 'lodash'\n\nconst getWordsLocally = async (str, options) => {\n  let newWords = getAllWords(str, 3, options)\n  newWords = orderBy(newWords, (word) => word.length, 'desc')\n  return newWords\n}\n\nconst fetchAllWords = async (str, options) => {\n  const backendBase = process.env.REACT_APP_BACKEND_BASE || ''\n  const { finalS, duplicateLetter, excludeAnagrams } = options\n  const response = await axios.get(\n    `${backendBase}/api/ag/${str}?adds=${finalS}&double=${duplicateLetter}`,\n  )\n  return response.data\n}\n\nconst getPossibleWords = process.env.REACT_APP_HAS_BACKEND == '1' ? fetchAllWords : getWordsLocally\n\nfunction App() {\n  const [search, setSearch] = useState('')\n  const [words, setWords] = useState([])\n  const [letterHistory, setLetterHistory] = useState([])\n  const [selected, setSelected] = useState('')\n  const [finalS, setFinalS] = useState(false)\n  const [duplicateLetter, setDuplicate] = useState(false)\n\n  const Dropdown = ({ options, onSelect }) => {\n    return (\n      <select\n        value={selected}\n        onChange={(e) => {\n          onSelect(e)\n        }}\n      >\n        {options.map((o) => (\n          <option key={o} value={o}>\n            {o}\n          </option>\n        ))}\n      </select>\n    )\n  }\n\n  const handleSelect = async (e) => {\n    setSelected(e.target.value)\n    refresh(e.target.value)\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    setLetterHistory(uniqBy([...letterHistory, search], sortedLetters))\n    refresh(search)\n  }\n\n  const refresh = async (search) => {\n    const newWords = await getPossibleWords(search, {\n      duplicateLetter,\n      finalS,\n    })\n    setWords(newWords)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <form onSubmit={handleSubmit}>\n          <div>\n            <input\n              className=\"letter-input\"\n              value={search}\n              autoFocus\n              onChange={(e) => setSearch(e.target.value)}\n            />\n          </div>\n          <div>\n            <label>\n              Add final S:\n              <input\n                name=\"finalS\"\n                type=\"checkbox\"\n                checked={finalS}\n                onChange={() => setFinalS(!finalS)}\n              />\n            </label>\n            <label>\n              Duplicate letter:\n              <input\n                name=\"duplicate\"\n                type=\"checkbox\"\n                checked={duplicateLetter}\n                onChange={() => setDuplicate(!duplicateLetter)}\n              />\n            </label>\n          </div>\n          <input type=\"submit\" hidden />\n        </form>\n        <div className=\"history-dropdown\">\n          <p>History:</p>\n          <Dropdown options={letterHistory} onSelect={handleSelect} />\n        </div>\n        <div className=\"main\">\n          <div className=\"history-list-holder\">\n            <p>History:</p>\n            <ul>\n              {letterHistory.map((word) => {\n                return (\n                  <li\n                    key={`history-${word}`}\n                    onClick={() => {\n                      setSearch(word)\n                      refresh(word)\n                    }}\n                    className=\"history-item\"\n                  >\n                    {word}\n                  </li>\n                )\n              })}\n            </ul>\n          </div>\n          <div>\n            {words.length === 0 && <p>No possible words!</p>}\n            <ul className=\"wordlist\">\n              {words.map((word) => {\n                return (\n                  <li className=\"wordlist-item\" key={`word-${word}`}>\n                    {word}\n                  </li>\n                )\n              })}\n            </ul>\n          </div>\n        </div>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}